const addBtn = document.getElementById('add-btn');
const taskInput = document.getElementById('task');
const taskTimeInput = document.getElementById('task-time');
const prioritySelect = document.getElementById('priority');
const taskList = document.getElementById('task-list');
const themeToggle = document.querySelector('.theme-toggle');

let tasks = JSON.parse(localStorage.getItem('tasks')) || [];
renderTasks();

// Dark/Light mode toggle
themeToggle.addEventListener('click', () => {
  document.body.classList.toggle('dark');
  themeToggle.textContent = document.body.classList.contains('dark') ? '☀️' : '🌙';
});

// Add task
addBtn.addEventListener('click', () => {
  const text = taskInput.value.trim();
  const time = taskTimeInput.value;
  const priority = prioritySelect.value;

  if (!text) return alert('Please enter a task!');

  const task = { text, time, priority, completed: false, id: Date.now() };
  tasks.push(task);
  saveTasks();
  renderTasks();

  taskInput.value = '';
  taskTimeInput.value = '';
});

// Save tasks to localStorage
function saveTasks() {
  localStorage.setItem('tasks', JSON.stringify(tasks));
}

// Render tasks
function renderTasks() {
  taskList.innerHTML = '';
  tasks.forEach(task => {
    const li = document.createElement('li');
    li.className = `task-item ${task.completed ? 'completed' : ''} ${task.priority.toLowerCase()}`;
    li.setAttribute('draggable', true);
    li.dataset.id = task.id;

    li.innerHTML = `
      <div>
        <span class="task-text">${task.text}</span>
        ${task.time ? `<div class="task-time">${new Date(task.time).toLocaleString()}</div>` : ''}
      </div>
      <div>
        <button class="complete-btn">✔</button>
        <button class="edit-btn">✏</button>
        <button class="delete-btn">🗑</button>
      </div>
    `;
    taskList.appendChild(li);

    // Complete task
    li.querySelector('.complete-btn').addEventListener('click', () => {
      task.completed = !task.completed;
      saveTasks();
      renderTasks();
      if(task.completed) showConfetti(); // Confetti popup on completion
    });

    // Edit task
    li.querySelector('.edit-btn').addEventListener('click', () => {
      const newText = prompt('Edit your task:', task.text);
      if (newText) {
        task.text = newText;
        saveTasks();
        renderTasks();
      }
    });

    // Delete task
    li.querySelector('.delete-btn').addEventListener('click', () => {
      tasks = tasks.filter(t => t.id !== task.id);
      saveTasks();
      renderTasks();
    });

    // Due task notification
    if(task.time && !task.completed) {
      const taskDate = new Date(task.time);
      const now = new Date();
      const diff = taskDate - now;
      if(diff > 0 && diff < 60000) { // notify if due in 1 min
        setTimeout(() => alert(`⏰ Task "${task.text}" is due now!`), diff);
      }
    }
  });

  enableDragAndDrop();
}

// Drag & Drop
function enableDragAndDrop() {
  let dragged;

  taskList.querySelectorAll('.task-item').forEach(item => {
    item.addEventListener('dragstart', e => { dragged = item; item.style.opacity = 0.5; });
    item.addEventListener('dragend', e => { item.style.opacity = 1; });

    item.addEventListener('dragover', e => e.preventDefault());
    item.addEventListener('drop', e => {
      e.preventDefault();
      if(dragged !== item) {
        const draggedIndex = tasks.findIndex(t => t.id == dragged.dataset.id);
        const droppedIndex = tasks.findIndex(t => t.id == item.dataset.id);
        tasks.splice(droppedIndex, 0, tasks.splice(draggedIndex, 1)[0]);
        saveTasks();
        renderTasks();
      }
    });
  });
}

// Confetti & Congratulatory popup
function showConfetti() {
  const container = document.getElementById('confetti-container');

  for(let i = 0; i < 100; i++) {
    const confetti = document.createElement('div');
    confetti.className = 'confetti';
    confetti.style.left = Math.random() * window.innerWidth + 'px';
    confetti.style.backgroundColor = `hsl(${Math.random() * 360}, 100%, 50%)`;
    confetti.style.animationDuration = 0.5 + Math.random() * 1.5 + 's';
    container.appendChild(confetti);

    setTimeout(() => confetti.remove(), 2000);
  }

  const popup = document.createElement('div');
  popup.textContent = 'Congratulations🥳!! Task Completed!';
  popup.style.position = 'fixed';
  popup.style.top = '50%';
  popup.style.left = '50%';
  popup.style.transform = 'translate(-50%, -50%)';
  popup.style.backgroundColor = '#6a5acd';
  popup.style.color = '#fff';
  popup.style.padding = '20px 30px';
  popup.style.borderRadius = '15px';
  popup.style.fontSize = '1.2rem';
  popup.style.boxShadow = '0 5px 20px rgba(0,0,0,0.3)';
  popup.style.zIndex = 10000;
  popup.style.opacity = 0;
  popup.style.transition = 'opacity 0.5s';

  document.body.appendChild(popup);
  setTimeout(() => popup.style.opacity = 1, 50);
  setTimeout(() => popup.style.opacity = 0, 2000);
  setTimeout(() => popup.remove(), 2500);
}
